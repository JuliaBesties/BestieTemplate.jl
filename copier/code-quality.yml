AddPrecommit:
  when: "{{ AnswerStrategy == 'ask' }}"
  type: bool
  default: "{{ AnswerStrategy != 'minimum' }}"
  help: Pre-commit (Whether to add pre-commit.org. It runs before every commit fixing your formatting and preventing bad practices)
  description: |
    Pre-commit runs several "hooks" whenever you make a commit. These hooks mostly fall into these categories:
    - Formatters: Not only JuliaFormatter, but also formatters for Markdown, TOML, YAML, and JSON files.
    - Linters: Analyze the code to prevent "bad" things. Sometimes includes formatting rules, but frequently useful for what falls outside formatting, but leads to poor code performance or possible pitfalls. In Julia, JET would be a candidate for this, although we don't have any Julia linters in the pre-commit hooks (yet).
    - Quality of Life checks: Prevents commits if you have `.rej` files, if you are on the main branch, if you forget a git merge marker, etc.
    Many pre-commit hooks are also available as editor plugins, and could be run continually in your editor, although we don't have a list for that (yet).
    Defaults to yes for the recommended strategy, or no otherwise.

AutoIncludeTests:
  when: "{{ AnswerStrategy == 'ask' }}"
  type: bool
  default: "{{ AnswerStrategy != 'minimum' }}"
  help: Auto-include test files named `test-<name>.jl` (Incentivizes splitting your tests and better naming them, and helps avoiding forgetting to include the tests manually)
  description: |
    This write a `runtests.jl` file that automatically recursively includes all `test-*.jl` files in the `test` folder inside `@testset`s.
    This incentivizes separating the tests and makes sure that you don't forget to include them.
    Defaults to yes for the recommended strategy, or no otherwise.
