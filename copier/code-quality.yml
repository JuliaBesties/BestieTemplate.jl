AddPrecommit:
  when: "{{ WhenForRobust }}"
  type: bool
  default: "{{ DefaultForRobust }}"
  help: Pre-commit (Whether to add pre-commit.org. It runs before every commit fixing your formatting and preventing bad practices)
  description: |
    Pre-commit runs several "hooks" whenever you make a commit. These hooks mostly fall into these categories:
    - Formatters: Not only JuliaFormatter, but also formatters for Markdown, TOML, YAML, and JSON files.
    - Linters: Analyze the code to prevent "bad" things. Sometimes includes formatting rules, but frequently useful for what falls outside formatting, but leads to poor code performance or possible pitfalls. In Julia, JET would be a candidate for this, although we don't have any Julia linters in the pre-commit hooks (yet).
    - Quality of Life checks: Prevents commits if you have `.rej` files, if you are on the main branch, if you forget a git merge marker, etc.
    Many pre-commit hooks are also available as editor plugins, and could be run continually in your editor, although we don't have a list for that (yet).

    Strategy: Robust

AutoIncludeTests:
  when: "{{ WhenForRobust }}"
  type: bool
  default: "{{ DefaultForRobust }}"
  help: Auto-include test files named `test-<name>.jl` (Incentivizes splitting your tests and better naming them, and helps avoiding forgetting to include the tests manually)
  description: |
    This write a `runtests.jl` file that automatically recursively includes all `test-*.jl` files in the `test` folder inside `@testset`s.
    This incentivizes separating the tests and makes sure that you don't forget to include them.

    Strategy: Robust

JuliaIndentation:
  when: "{{ WhenForAnyAsk }}"
  type: int
  help: Indentation length for Julia files (Used in .JuliaFormatter and .editorconfig)
  validator: "{% if JuliaIndentation <= 0 %}Indentation must be positive{% endif %}"
  default: 4
  description: |
    The number of spaces that define an indentation level.
    This is used in the following configuration files:

    - `.JuliaFormatter.toml`: To control indentation in Julia;
    - `.editorconfig`: To suggest indentation in many languages;

    This does **NOT** enforce indentation by itself, you still need tools to indent these.
    `pre-commit` is the recommended way to run these tools.
    For existing packages, this will be inferred from the indent value in the `.JuliaFormatter.toml` file.

    Strategy: none

MarkdownIndentation:
  when: "{{ WhenForRobust }}"
  type: int
  help: Indentation length for Markdown files (Used in .markdownlint.json and .editorconfig)
  validator: "{% if MarkdownIndentation <= 0 %}Indentation must be positive{% endif %}"
  default: 2
  description: |
    The number of spaces that define an indentation level.
    This is used in the following configuration files:

    - `.markdownlint.json`: To control indentation in Markdown;
    - `.editorconfig`: To suggest indentation in many languages;

    This does **NOT** enforce indentation by itself, you still need tools to indent these.
    `pre-commit` is the recommended way to run these tools.
    For existing packages, this will be inferred from the indent value in the `.JuliaFormatter.toml` file.

    Strategy: Robust

ConfigIndentation:
  when: "{{ WhenForRobust }}"
  type: int
  help: Indentation length for configuration files (Used to format YAML and JSON files)
  validator: "{% if ConfigIndentation <= 0 %}Indentation must be positive{% endif %}"
  default: 2
  description: |
    The number of spaces that define an indentation level.
    This is used in the following configuration files:

    - `.pre-commit-config.yml`: In the hook `pretty-format-json` to control the indentation of JSON files.
    - `.yamllint.yml`: To control indentation in YAML files;
    - `.editorconfig`: To suggest indentation in many languages;

    This does **NOT** enforce indentation by itself, you still need tools to indent these.
    `pre-commit` is the recommended way to run these tools.
    For existing packages, this will be inferred from the indent value in the `.JuliaFormatter.toml` file.

    Strategy: Robust

CheckExplicitImports:
  when: "{{ WhenForAdvanced }}"
  type: bool
  help: Add ExplicitImports check to pre-commit (Check correct usage of using vs import and public API usage. See https://github.com/ericphanson/ExplicitImports.jl)
  default: "{{ DefaultForAdvanced }}"
  description: |
    ExplicitImports performs a few checks to determine if this package is using other packages correctly.
    See https://github.com/ericphanson/ExplicitImports.jl
    Defaults to false, since many Julia packages have not adopted the idea yet.

    Strategy: none

ExplicitImportsChecklist:
  when: "{{ CheckExplicitImports and WhenForAnyAsk }}"
  type: str
  help: Checklist for ExplicitImports (Comma-separated list to be passed to ExplicitImports' --checklist. Defaults to a reasonable strictness. Use `all` to run everything or see all options in https://github.com/ericphanson/ExplicitImports.jl?tab=readme-ov-file#command-line-usage)
  default: "exclude_all_qualified_accesses_are_public"
  description: |
    ExplicitImports performs various checks. Some depend on the imported
    packages fixing the definition of public API to Julia's latest definitions,
    so using "all" is prone to failures until most Julia packages adopt the new
    definition.

    Valid values for each check are:
    - Individual checks:
      - `all_explicit_imports_are_public`,
      - `all_qualified_accesses_are_public`,
      - `all_explicit_imports_via_owners`,
      - `all_qualified_accesses_via_owners`,
      - `no_implicit_imports`,
      - `no_self_qualified_accesses`,
      - `no_stale_explicit_imports`
    - Select all checks: all
    - Exclude a check: prepend an individual check with 'exclude_'

    The selection logic is performed in the order given.
    If you pass only exclusions, it will assume that it starts from a complete list, and then excludes.
    If you pass any individual checks, it will assume that it starts from an empty list, and then includes.
    Passing both individual and exclusion checks does not make sense.

    Strategy: none

AddDependabot:
  when: "{{ WhenForModerate }}"
  type: bool
  default: "{{ DefaultForModerate }}"
  help: Add Dependabot (Whether to add dependabot.yml, which runs periodically to update your GitHub actions versions)
  description: |
    Adds dependabot.yml (https://docs.github.com/en/code-security/dependabot),
    which runs on GitHub repos periodically to make automated updates to your
    GitHub actions.

    Strategy: Moderate

AddLychee:
  when: "{{ WhenForLight }}"
  type: bool
  default: "{{ DefaultForLight }}"
  help: Add Lychee (Add .lychee.toml, configuration for the Lychee link checker)
  description: |
    Adds the configuration file for .lychee.toml, a link checker.
    To run it, install lychee (https://github.com/lycheeverse/lychee) and run

        lychee --config .lychee.toml .

    It is also used by the Lint.yml action if AddLintCI is true.

    Strategy: Light
