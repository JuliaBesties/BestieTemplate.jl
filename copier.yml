# Essential questions
PackageName:
  type: str
  help: Package name without '.jl'
  validator: "{% if PackageName | length == 0 %}Can't be empty{% endif %}"

PackageUUID:
  type: str
  help: UUID (For existing packages, copy the UUID from Project.toml, otherwise use the one generated below)
  validator: "{% if PackageUUID | length == 0 %}Can't be empty{% endif %}"
  default: "{{ 999999999999999999999999999999999 | ans_random | to_uuid }}"

PackageOwner:
  type: str
  help: GitHub organization or user that owns the package
  validator: "{% if PackageOwner | length == 0 %}Can't be empty{% endif %}"

AuthorName:
  type: str
  validator: "{% if AuthorName | length == 0 %}Can't be empty{% endif %}"

AuthorEmail:
  type: str
  validator: "{% if AuthorEmail | length == 0 %}Can't be empty{% endif %}"

JuliaMinVersion:
  type: str
  help: Minimum Julia version to be used in Project.toml and CI (Normally the LTS version)
  default: 1.6

License:
  type: str
  choices:
    - Apache-2.0
    - GPL-3.0
    - MIT
    - MPL-2.0
  default: MIT

# Optional
AnswerStrategy:
  type: str
  default: recommended
  help: How do you want to deal with the optional questions? (You can use our defaults, or the bare minimum, or decide everything)
  choices:
    Recommended (Our defaults): "recommended"
    Minimum (Answer no to any addition): "minimum"
    Ask me (Ask all questions): "ask"

# Formatting and Linting
AddPrecommit:
  when: "{{ AnswerStrategy == 'ask' }}"
  type: bool
  default: "{{ AnswerStrategy != 'minimum' }}"
  help: Add pre-commit config? (pre-commit runs before every commit fixing your formatting and preventing bad practices)

Indentation:
  when: "{{ AnswerStrategy == 'ask' }}"
  type: int
  help: Indentation length for many formatters and linters
  validator: "{% if Indentation <= 0 %}Indentation must be positive{% endif %}"
  default: 2

# CI
SimplifiedPRTest:
  when: "{{ AnswerStrategy == 'ask' }}"
  type: bool
  help: (Simplified PR Test) Do you want to limit the Pull Request test to a single configuration (ubuntu + latest stable Julia)? This will make the PR tests run faster, but might miss OS-specific or LTS specific errors.
  default: "{{ AnswerStrategy != 'minimum' }}"

AddMacToCI:
  when: "{{ AnswerStrategy == 'ask' }}"
  type: bool
  help: Package tests run on Ubuntu latest. Do you want to add macOS latest as well?
  default: "{{ AnswerStrategy != 'minimum' }}"

AddWinToCI:
  when: "{{ AnswerStrategy == 'ask' }}"
  type: bool
  help: Do you want to add Windows latest as well?
  default: "{{ AnswerStrategy != 'minimum' }}"

RunJuliaNightlyOnCI:
  when: "{{ AnswerStrategy == 'ask' }}"
  type: bool
  help: Package tests run on Julia version {{ JuliaMinVersion }} and on the latest stable release. Do you also want to run them on the nightly version?
  default: false

UseCirrusCI:
  when: "{{ AnswerStrategy == 'ask' }}"
  type: bool
  help: Add CirrusCI to run the package tests on FreeBSD?
  default: false

# General
AddAllcontributors:
  when: "{{ AnswerStrategy == 'ask' }}"
  type: bool
  default: "{{ AnswerStrategy != 'minimum' }}"
  help: Add allcontributors to the package?

AddCodeOfConduct:
  when: "{{ AnswerStrategy == 'ask' }}"
  type: bool
  default: "{{ AnswerStrategy != 'minimum' }}"
  help: Add a CODE_OF_CONDUCT.md file from Contributor Covenant? {{ AuthorEmail }} will be listed as contact point.

AddGitHubTemplates:
  when: "{{ AnswerStrategy == 'ask' }}"
  type: bool
  default: "{{ AnswerStrategy != 'minimum' }}"
  help: Add GitHub issue and PR templates? (These create forms for issue creation and information on Pull Requests to improve the description quality.)

_skip_if_exists:
  - "**/*.jl"
  - "!docs/make.jl"
  - "**/Project.toml"
  - CITATION.cff
  - LICENSE

_subdirectory: template

_message_after_copy: |
  Your package {{ PackageName }}.jl has been created successfully! ðŸŽ‰

  Next steps: Create git repository and push to Github.
  $ cd <path>
  $ git init
  $ git add .
  $ pre-commit run -a # Try to fix possible pre-commit issues (failures are expected)
  $ git add .
  $ git commit -m "First commit"
  $ pre-commit install # Future commits can't be directly to main unless you use -n
  Create a repo on GitHub and push your code to it.

  Read the full guide: https://abelsiqueira.com/COPIERTemplate.jl/stable/10-full-guide
